# -*- coding: utf-8 -*-
"""IVA MICRO PROJECT CODE

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vMIXIyleM6e1B_7cHNVbk2pHF-tt4I7J

**CNN**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

import keras
from keras.models import Sequential
from keras.layers import Conv2D,Flatten,Dense,MaxPooling2D,Dropout
from sklearn.metrics import accuracy_score

train_dir = '/content/drive/MyDrive/train'
test_dir = '/content/drive/MyDrive/test'

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(train_dir, target_size=(224,224), batch_size=20, class_mode='binary')
test_generator = test_datagen.flow_from_directory(test_dir, target_size=(224,224), batch_size=20, class_mode='binary')

model = Sequential()

model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))
model.add(MaxPooling2D(2, 2))

model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(2, 2))

model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D(2, 2))

model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D(2, 2))

model.add(Flatten())
model.add(Dense(512, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.summary()

from tensorflow.keras import optimizers

model.compile(loss='binary_crossentropy',
              optimizer=optimizers.RMSprop(learning_rate=1e-3),
              metrics=['accuracy'])

history = model.fit(train_generator,
                    steps_per_epoch=train_generator.samples // 20,
                    epochs=20,
                    validation_data=test_generator,
                    validation_steps=test_generator.samples // 20)

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

epochs = range(1, len(acc) + 1)

# Plotting training accuracy as blue dots
plt.plot(epochs, acc, 'bo', label='Training acc')

# Plotting validation accuracy as a solid blue line
plt.plot(epochs, val_acc, 'b', label='Validation acc')

# Adding labels, title, and legend
plt.title('Training and validation accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

# Display the plot
plt.show()

loss = history.history['loss']
val_loss = history.history['val_loss']

plt.plot(epochs,loss,'bo',label='Training loss')
plt.plot(epochs,val_loss,'b',label='Validation loss')
plt.legend()

plt.show()

from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
# Use a raw string to handle the backslashes correctly
path = r'/content/drive/MyDrive/test/0/258.jpg'
img = image.load_img(path, target_size=(224, 224))
plt.imshow(img, interpolation='nearest')
plt.show()

img_array = np.array(img)  # Convert image to NumPy array
print(img_array.shape)  # Print the shape of the NumPy array

# Reshape img_array
img_array_reshaped = img_array.reshape(1, 224, 224, 3)

# Print the shape of the reshaped array
print(img_array_reshaped)

a = model.predict(img_array_reshaped)
if (a>=[[0]]) and (a<[[1]]):
    print('It seem like a cat')
else:
    print('It seem like a dog')

"""**ResNet50**"""

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten, GlobalAveragePooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import ResNet50
from tensorflow.keras import optimizers

# Define directories for train and test data
train_dir = '/content/drive/MyDrive/train'
test_dir = '/content/drive/MyDrive/test'

# Data generators
train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(224, 224),
    batch_size=20,
    class_mode='binary'
)

test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(224, 224),
    batch_size=20,
    class_mode='binary'
)

# Load ResNet50 with pre-trained weights, exclude top layers
resnet_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Freeze the pre-trained layers
for layer in resnet_model.layers:
    layer.trainable = False

# Build the model
model = Sequential()
model.add(resnet_model)
model.add(GlobalAveragePooling2D())  # Add global average pooling to reduce parameters
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))  # Binary classification output layer



# Compile the model
model.compile(
    loss='binary_crossentropy',
    optimizer=optimizers.RMSprop(learning_rate=1e-4),
    metrics=['accuracy']
)

# Train the model
history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // 20,
    epochs=10,
    validation_data=test_generator,
    validation_steps=test_generator.samples // 20
)

# Plot training and validation accuracy and loss
def plot_history(history):
    acc = history.history['accuracy']
    val_acc = history.history['val_accuracy']
    loss = history.history['loss']
    val_loss = history.history['val_loss']
    epochs = range(1, len(acc) + 1)

    plt.figure()
    plt.plot(epochs, acc, 'bo', label='Training accuracy')
    plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
    plt.title('Training and Validation Accuracy')
    plt.xlabel('Epochs')
    plt.ylabel('Accuracy')
    plt.legend()
    plt.show()

    plt.figure()
    plt.plot(epochs, loss, 'bo', label='Training loss')
    plt.plot(epochs, val_loss, 'b', label='Validation loss')
    plt.title('Training and Validation Loss')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend()
    plt.show()

plot_history(history)

# Test the model with a sample image
from tensorflow.keras.preprocessing import image

path = '/content/drive/MyDrive/test/0/258.jpg' # Update this path as needed
img = image.load_img(path, target_size=(224, 224))
plt.imshow(img)
plt.show()

img_array = np.array(img)  # Convert image to NumPy array
img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension

# Predict the class of the image
prediction = model.predict(img_array)
if prediction[0] > 0.5:
    print('It seems like a dog')
else:
    print('It seems like a cat')

"""**VGG16**"""

from tensorflow.keras.applications import VGG16

# Load VGG16 with pre-trained weights, exclude top layers
vgg_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Freeze the pre-trained layers
for layer in vgg_model.layers:
    layer.trainable = False

# Build the model
model = Sequential()
model.add(vgg_model)
model.add(Flatten())  # Flatten the output of VGG16
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))  # Binary classification output layer



# Compile the model
model.compile(
    loss='binary_crossentropy',
    optimizer=optimizers.RMSprop(learning_rate=1e-4),
    metrics=['accuracy']
)

# Train the model
history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // 20,
    epochs=10,
    validation_data=test_generator,
    validation_steps=test_generator.samples // 20
)

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image

# Plot training and validation accuracy
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
epochs = range(1, len(acc) + 1)

plt.figure()
plt.plot(epochs, acc, 'bo', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# Plot training and validation loss
loss = history.history['loss']
val_loss = history.history['val_loss']

plt.figure()
plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

# Test the model with a sample image
path = '/content/drive/MyDrive/test/0/251.jpg'  # Update this path as needed
img = image.load_img(path, target_size=(224, 224))
plt.imshow(img)
plt.axis('off')  # Hide axes
plt.show()

img_array = np.array(img) / 255.0  # Normalize the image
img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension

# Predict the class of the image
prediction = model.predict(img_array)
if prediction[0] > 0.5:
    print('It seems like a dog')
else:
    print('It seems like a cat')

"""**InceptionV3**"""

from tensorflow.keras.applications import InceptionV3

# Load InceptionV3 with pre-trained weights, exclude top layers
inception_model = InceptionV3(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Freeze the pre-trained layers
for layer in inception_model.layers:
    layer.trainable = False

# Build the model
model = Sequential()
model.add(inception_model)
model.add(GlobalAveragePooling2D())
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))

# Compile the model
model.compile(
    loss='binary_crossentropy',
    optimizer=optimizers.RMSprop(learning_rate=1e-4),
    metrics=['accuracy']
)

# Train the model
history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // 20,
    epochs=10,
    validation_data=test_generator,
    validation_steps=test_generator.samples // 20
)

# Plot history
plot_history(history)

path = '/content/drive/MyDrive/test/1/268.jpg'  # Update this path as needed
img = image.load_img(path, target_size=(224, 224))
plt.imshow(img)
plt.show()

img_array = np.array(img)  # Convert image to NumPy array
img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension

# Predict the class of the image
prediction = model.predict(img_array)
if prediction[0] > 0.5:
    print('It seems like a dog')
else:
    print('It seems like a cat')

from tensorflow.keras.models import load_model

# Save the model
model.save('model_name.keras')

